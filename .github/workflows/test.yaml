---
# SPDX-FileCopyrightText: 2023 Steffen Vogel, OPAL-RT Germany GmbH
# SPDX-License-Identifier: Apache-2.0

name: Test with Docker Compose

permissions:
  packages: write

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  compose:
    timeout-minutes: 10
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Docker builder
        uses: docker/setup-buildx-action@v2

      - name: Setup Python, Poetry and Dependencies
        uses: packetcoders/action-setup-cache-python-poetry@main
        with:
          python-version: 3.11
          poetry-version: 1.7.1
          install-args: --without docs

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Docker Compose cache file
        run: poetry run python scripts/generate-compose-cache.py

      - name: Create .env file
        run: sed 's/PLEASE-CHANGE-ME/7418GOKUjD4npqnfBi3uDVsrIoqgiEJD/g' .env.example > .env

      - name: Build Docker Compose
        run: docker buildx bake
          --file compose.yaml
          --file compose-cache.json

      - name: Start containers
        run: docker compose up --detach --quiet-pull

      - name: Ensure S3 buckets exist
        run: docker compose up minio-setup

      - name: Test with pytest
        env:
          S3_HOST: localhost
          MQTT_HOST: localhost
        run: poetry run pytest

      - name: Get Docker Compose log output
        if: always()
        run: |
          mkdir logs
          for SERVICE in $(docker compose ps --services); do
            echo "::group::Service ${SERVICE}"
            docker compose logs ${SERVICE} | tee logs/${SERVICE}.log
            echo "::endgroup::"
          done

      - name: Archive Docker Compose logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compose-logs
          path: logs

      - name: Stop containers
        if: always()
        run: docker compose down
