---
# SPDX-FileCopyrightText: 2023-2024 Steffen Vogel, OPAL-RT Germany GmbH
# SPDX-License-Identifier: Apache-2.0

version: "3.9"
name: platform

x-platform-service: &platform-service
  environment:
    S3_HOST: minio
    MQTT_HOST: mosquitto
    TLS_CACERT: /certs/ca.crt
    TLS_CERT: /certs/clients/admin.crt
    TLS_KEY: /keys/clients/admin.key

  env_file:
  - .env

  build:
    context: .
    tags:
    - seguro/platform

  restart: unless-stopped

  depends_on:
    pki-setup:
      condition: service_completed_successfully

services:
  docs:
    build:
      context: .
      dockerfile: docs/Dockerfile
    restart: unless-stopped

    labels:
    - traefik.enable=true
    - traefik.http.routers.docs.rule=Host(`${DOMAIN}`)
    - traefik.http.routers.docs.tls=true

    volumes:
    - type: volume
      source: certs
      target: /usr/share/nginx/html/certs
      read_only: true

  minio:
    image: minio/minio:RELEASE.2023-04-28T18-11-17Z
    restart: unless-stopped

    command: server
      --address=":9000"
      --console-address=":9001"
      --certs-dir="/keys/minio"
      --ftp="address=${DOMAIN}:2021"
      --ftp="passive-port-range=30000-40000"
      --sftp="address=:2022"
      --sftp="ssh-private-key=/keys/minio/ssh_host_rsa_key"
      /data

    labels:
    - traefik.enable=true

    # Perform TLS passthrough to allow for mTLS authentication
    - traefik.tcp.routers.store-s3.rule=HostSNI(`store.${DOMAIN}`)
    - traefik.tcp.routers.store-s3.service=store-s3
    - traefik.tcp.routers.store-s3.tls.passthrough=true
    - traefik.tcp.services.store-s3.loadbalancer.server.port=9000

    - traefik.http.routers.store-ui.rule=Host(`ui.store.${DOMAIN}`)
    - traefik.http.routers.store-ui.service=store-ui
    - traefik.http.routers.store-ui.tls=true
    - traefik.http.services.store-ui.loadbalancer.server.port=9001
    - traefik.http.services.store-ui.loadbalancer.server.scheme=https
    - traefik.http.services.store-ui.loadbalancer.serversTransport=store-ui@file

    depends_on:
      pki-setup:
        condition: service_completed_successfully

    environment:
    - MINIO_ROOT_USER=${ADMIN_USERNAME}
    - MINIO_ROOT_PASSWORD=${ADMIN_PASSWORD}
    - MINIO_IDENTITY_TLS_ENABLE=on

    ports:
    - target: 9000
      published: 9000
      protocol: tcp
      mode: host
    - target: 9001
      published: 9001
      protocol: tcp
      mode: host
    - target: 2021
      published: 2021
      protocol: tcp
      mode: host
    - target: 2022
      published: 2022
      protocol: tcp
      mode: host

    healthcheck:
      test: ["CMD", "curl", "--cacert", "/keys/minio/CAs/ca.crt", "--fail", "https://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 20s
      retries: 3
      start_period: 20s

    volumes:
    - type: volume
      source: store
      target: /data/
    - type: volume
      source: key_minio
      target: /keys/minio
      read_only: true

  minio-setup:
    <<: *platform-service

    restart: "no"

    depends_on:
      pki-setup:
        condition: service_completed_successfully
      minio:
        condition: service_healthy

    command: /setup-minio.sh

    env_file:
    - .env

    volumes:
    - type: volume
      source: key_clients
      target: /keys/clients
    - type: volume
      source: certs
      target: /certs
    - type: bind
      source: scripts/setup-minio.sh
      target: /setup-minio.sh
      read_only: true
    - type: bind
      source: store/
      target: /store/
      read_only: true

  pki-setup:
    build:
      context: .
      target: setup

    command: setup-pki.sh

    environment:
      # Pass-through CI envvar to tweak PKI config for CI environments
      CI: ${CI}

    env_file:
    - .env

    volumes:
    - type: volume
      source: key_ca
      target: /keys/ca
    - type: volume
      source: key_tsa
      target: /keys/tsa
    - type: volume
      source: key_server
      target: /keys/server
    - type: volume
      source: key_clients
      target: /keys/clients
    - type: volume
      source: key_ssh
      target: /keys/ssh
    - type: volume
      source: key_minio
      target: /keys/minio
    - type: volume
      source: certs
      target: /certs
    - type: bind
      source: scripts/setup-pki.sh
      target: /setup-pki.sh
      read_only: true
    - type: bind
      source: ./keys
      target: /keys/out

  mosquitto:
    image: eclipse-mosquitto:2.0.18-openssl
    user: "mosquitto:mosquitto"
    restart: unless-stopped

    volumes:
    - type: bind
      source: ./etc/mosquitto/
      target: /mosquitto/config/
    - type: volume
      source: mosquitto
      target: /mosquitto/data/

    - type: volume
      source: key_server
      target: /keys/server
      read_only: true
    - type: volume
      source: key_clients
      target: /keys/clients
      read_only: true
    - type: volume
      source: certs
      target: /certs
      read_only: true

    ports:
    - target: 8883
      published: 8883
      protocol: tcp
      mode: host

    healthcheck:
      test: ["CMD", "mosquitto_sub", "--cafile", "/certs/ca.crt", "--cert", "/certs/clients/admin.crt", "--key", "/keys/clients/admin.key", "-L", "mqtts://mosquitto:8883/$$SYS/#", "-C", "1", "-i", "healthcheck", "-W", "3"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s

    depends_on:
      pki-setup:
        condition: service_completed_successfully
      mosquitto-setup:
        condition: service_completed_successfully

  mosquitto-setup:
    restart: "no"

    env_file:
    - .env

    image: eclipse-mosquitto:2.0.18-openssl
    user: "mosquitto:mosquitto"

    entrypoint: /bin/sh
    command: /setup-mosquitto.sh

    volumes:
    - type: bind
      source: etc/mosquitto/
      target: /mosquitto/config/
    - type: bind
      source: scripts/setup-mosquitto.sh
      target: /setup-mosquitto.sh
      read_only: true
    - type: volume
      source: mosquitto
      target: /mosquitto/data/

  # mosquitto-setup-acl:
  #   environment:
  #     MQTT_HOST: mosquitto
  #     TLS_CACERT: /certs/ca.crt
  #     TLS_CERT: /certs/clients/admin.crt
  #     TLS_KEY: /keys/clients/admin.key

  #   restart: "no"

  #   depends_on:
  #     pki-setup:
  #       condition: service_completed_successfully
  #     mosquitto:
  #       condition: service_healthy

  #   image: eclipse-mosquitto:2.0.18-openssl
  #   user: "mosquitto:mosquitto"

  #   entrypoint: /bin/sh
  #   command: /setup-mosquitto-acl.sh

  #   volumes:
  #   - type: volume
  #     source: key_clients
  #     target: /keys/clients
  #     read_only: true
  #   - type: volume
  #     source: certs
  #     target: /certs
  #     read_only: true
  #   - type: bind
  #     source: etc/mosquitto/
  #     target: /mosquitto/config/
  #   - type: bind
  #     source: scripts/setup-mosquitto-acl.sh
  #     target: /setup-mosquitto-acl.sh

  yacht:
    image: selfhostedpro/yacht
    restart: unless-stopped

    environment:
    - SECRET_KEY=${SECRET}
    - ADMIN_EMAIL=${ADMIN_USERNAME}
    - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    - ACCESS_TOKEN_EXPIRES=2592000

    - PUID=0
    - PGID=0
    - COMPOSE_DIR=/compose

    labels:
    - traefik.enable=true
    - traefik.http.routers.yacht.rule=Host(`ui.${DOMAIN}`)
    - traefik.http.routers.yacht.tls=true

    ports:
    - 8000:8000

    volumes:
    - type: volume
      source: yacht_config
      target: /config
    - type: bind
      source: /var/run/docker.sock
      target: /var/run/docker.sock

  registry:
    image: registry:2
    restart: unless-stopped

    labels:
    - traefik.enable=true
    - traefik.http.routers.registry.rule=Host(`registry.${DOMAIN}`)
    - traefik.http.routers.registry.tls=true
    - traefik.http.middlewares.add-cors.headers.customresponseheaders.Access-Control-Allow-Origin=https://ui.registry.${DOMAIN}

    depends_on:
      pki-setup:
        condition: service_completed_successfully

    ports:
    - protocol: tcp
      mode: host
      published: 5001
      target: 5001

    volumes:
    - type: volume
      source: registry
      target: /var/lib/registry
    - type: bind
      source: ./etc/registry
      target: /etc/docker/registry
      read_only: true
    - type: volume
      source: key_server
      target: /keys/server
      read_only: true
    - type: volume
      source: certs
      target: /certs
      read_only: true

    env_file:
    - .env

    environment:
      SSL_CERT_FILE: /certs/ca.crt
      REGISTRY_STORAGE_S3_ACCESSKEY: ${ADMIN_USERNAME}
      REGISTRY_STORAGE_S3_SECRETKEY: ${ADMIN_PASSWORD}
      REGISTRY_HTTP_SECRET: ${SECRET}
      REGISTRY_HTTP_HEADERS_Access-Control-Allow-Origin: "[https://ui.registry.${DOMAIN}]"

  registry-ui:
    image: joxit/docker-registry-ui:2.5.7
    restart: unless-stopped

    labels:
    - traefik.enable=true
    - traefik.http.routers.registry-ui.rule=Host(`ui.registry.${DOMAIN}`)
    - traefik.http.routers.registry-ui.tls=true

    ports:
    - protocol: tcp
      target: 80
      published: 8080

    depends_on:
    - registry

    environment:
      REGISTRY_TITLE: SEGuRo Private Docker Registry
      REGISTRY_URL: https://registry.${DOMAIN}
      SINGLE_REGISTRY: "true"
      DELETE_IMAGES: "true"
      SHOW_CONTENT_DIGEST: "true"
      THEME: light
      REGISTRY_SECURED: "true"

  traefik:
    image: "traefik:v2.10"
    restart: unless-stopped
    ports:
    - "80:80"
    - "443:443"

    volumes:
    - type: bind
      source: /var/run/docker.sock
      target: /var/run/docker.sock
      read_only: true
    - type: bind
      source: ./etc/traefik/
      target: /etc/traefik/
      read_only: true

    - type: volume
      source: key_server
      target: /keys/server
      read_only: true
    - type: volume
      source: certs
      target: /certs
      read_only: true

    depends_on:
      pki-setup:
        condition: service_completed_successfully

  scheduler:
    <<: *platform-service

    command: scheduler

    working_dir: /workspace

    volumes:
    - type: volume
      source: key_clients
      target: /keys/clients
      read_only: true
    - type: volume
      source: certs
      target: /certs
      read_only: true
    - type: bind
      source: .
      target: /workspace
      read_only: true
    - type: bind
      source: /var/run/docker.sock
      target: /var/run/docker.sock
      read_only: true

  timestamp-server:
    image: ghcr.io/sigstore/timestamp-server@sha256:f4dcc96092a1b1fb5ca36d776f92a7cc62cdb1a8866c5120340f919141a3cd58
    command: [
      "serve",
      "--config", "/etc/timestamp-server/config.yaml"
      ]

    restart: always

    labels:
    - traefik.enable=true
    - traefik.http.routers.timestamp-server.rule=Host(`tsa.${DOMAIN}`)
    - traefik.http.routers.timestamp-server.tls=true
    - traefik.http.routers.timestamp-server.service=tsa-api
    - traefik.http.services.tsa-api.loadbalancer.server.port=3000
    ports:
      - "3000:3000"
      - "2112:2112"

    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:3000/ping"]
    #   interval: 10s
    #   timeout: 3s
    #   retries: 3
    #   start_period: 5s

    volumes:
    - type: bind
      source: ./etc/timestamp-server/
      target: /etc/timestamp-server/
      read_only: true
    - type: volume
      source: key_tsa
      target: /keys/tsa
      read_only: true
    - type: volume
      source: certs
      target: /certs
      read_only: true

volumes:
  key_ca:
  key_server:
  key_tsa:
  key_clients:
  key_minio:
  key_ssh:
  certs:
  store:
  registry:
  mosquitto:
  yacht_config:
