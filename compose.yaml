---
# SPDX-FileCopyrightText: 2023 Steffen Vogel, OPAL-RT Germany GmbH
# SPDX-License-Identifier: Apache-2.0

version: "3.9"
name: platform

services:
  docs:
    build:
      context: .
      dockerfile: docs/Dockerfile
    container_name: docs
    restart: unless-stopped

    labels:
    - traefik.enable=true
    - traefik.http.routers.docs.rule=Host(`${DOMAIN}`)
    - traefik.http.routers.docs.tls=true

  minio:
    image: minio/minio:RELEASE.2023-04-28T18-11-17Z
    container_name: minio
    restart: unless-stopped

    command: server
      --address ":9000"
      --console-address ":9001"
      --ftp="address=:2021"
      --ftp="passive-port-range=30000-40000"
      --sftp="address=:2022"
      --sftp="ssh-private-key=/keys/ssh_host_rsa_key"
      /data

      # --ftp="tls-private-key=path/to/private.key"
      # --ftp="tls-public-cert=path/to/public.crt"

    labels:
    - traefik.enable=true
    - traefik.http.routers.store-s3.rule=Host(`store.${DOMAIN}`)
    - traefik.http.routers.store-s3.service=store-s3
    - traefik.http.routers.store-s3.tls=true
    - traefik.http.services.store-s3.loadbalancer.server.port=9000
    - traefik.http.routers.store-ui.rule=Host(`ui.store.${DOMAIN}`)
    - traefik.http.routers.store-ui.service=store-ui
    - traefik.http.routers.store-ui.tls=true
    - traefik.http.services.store-ui.loadbalancer.server.port=9001

    depends_on:
      setup:
        condition: service_completed_successfully

    environment:
    - MINIO_ROOT_USER=${ADMIN_USERNAME}
    - MINIO_ROOT_PASSWORD=${ADMIN_PASSWORD}

    ports:
    - target: 9000
      published: 9000
      protocol: tcp
      mode: host
    - target: 9001
      published: 9001
      protocol: tcp
      mode: host
    - target: 2021
      published: 2021
      protocol: tcp
      mode: host
    - target: 2022
      published: 2022
      protocol: tcp
      mode: host

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 20s
      retries: 3
      start_period: 20s

    volumes:
    - type: volume
      source: store
      target: /data/
    - type: volume
      source: keys
      target: /keys

  minio-setup:
    build:
      context: .

    depends_on:
    - minio

    command: ["minio-setup"]

    env_file:
    - .env

    environment:
    - MINIO_ROOT_USER=${ADMIN_USERNAME}
    - MINIO_ROOT_PASSWORD=${ADMIN_PASSWORD}

    volumes:
    - type: volume
      source: keys
      target: /keys

  setup:
    build:
      context: .
      target: setup

    environment:
    - ADMIN_USERNAME=${ADMIN_USERNAME}
    - ADMIN_PASSWORD=${ADMIN_PASSWORD}

    command: /setup.sh

    volumes:
    - type: volume
      source: keys
      target: /keys
    - type: bind
      source: setup.sh
      target: /setup.sh

  mosquitto:
    image: eclipse-mosquitto:2
    container_name: mosquitto
    restart: unless-stopped

    volumes:
    - type: bind
      source: ./etc/mosquitto/
      target: /mosquitto/config/
    - type: volume
      source: mosquitto
      target: /mosquitto/data/

    ports:
    - target: 1883
      published: 1883
      protocol: tcp
      mode: host

    healthcheck:
      test: ["CMD", "mosquitto_sub", "-p", "1880", "-t", "$$SYS/#", "-C", "1", "-i", "healthcheck", "-W", "3"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s

  yacht:
    image: selfhostedpro/yacht
    container_name: yacht
    restart: unless-stopped

    environment:
    - SECRET_KEY=${SECRET}
    - ADMIN_EMAIL=${ADMIN_USERNAME}
    - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    - ACCESS_TOKEN_EXPIRES=2592000

    - PUID=0
    - PGID=0
    - COMPOSE_DIR=/compose

    labels:
    - traefik.enable=true
    - traefik.http.routers.yacht.rule=Host(`ui.${DOMAIN}`)
    - traefik.http.routers.yacht.tls=true

    ports:
    - 8000:8000

    volumes:
    - type: volume
      source: yacht-config
      target: /config
    - type: bind
      source: /var/run/docker.sock
      target: /var/run/docker.sock

  registry:
    image: registry:2
    container_name: registry
    restart: unless-stopped

    labels:
    - traefik.enable=true
    - traefik.http.routers.registry.rule=Host(`registry.${DOMAIN}`)
    - traefik.http.routers.registry.tls=true

    depends_on:
      setup:
        condition: service_completed_successfully

    ports:
    - protocol: tcp
      mode: host
      published: 5001
      target: 5001

    volumes:
    - type: volume
      source: registry
      target: /var/lib/registry
    - type: bind
      source: ./etc/registry
      target: /etc/docker/registry
    - type: volume
      source: keys
      target: /keys

    environment:
    - REGISTRY_STORAGE_S3_ACCESSKEY=${ADMIN_USERNAME}
    - REGISTRY_STORAGE_S3_SECRETKEY=${ADMIN_PASSWORD}
    - REGISTRY_HTTP_SECRET=${SECRET}
    - REGISTRY_HTTP_HEADERS_Access-Control-Allow-Origin=[https://ui.registry.${DOMAIN}]
    # See: https://distribution.github.io/distribution/#tls
    # - REGISTRY_HTTP_TLS_CERTIFICATE=
    # - REGISTRY_HTTP_TLS_KEY

  registry-ui:
    image: joxit/docker-registry-ui:latest
    container_name: registry_ui
    restart: unless-stopped

    labels:
    - traefik.enable=true
    - traefik.http.routers.registry-ui.rule=Host(`ui.registry.${DOMAIN}`)
    - traefik.http.routers.registry-ui.tls=true

    ports:
    - protocol: tcp
      target: 80
      published: 8080

    depends_on:
    - registry

    environment:
    - REGISTRY_TITLE=SEGuRo Private Docker Registry
    - REGISTRY_URL=https://registry.${DOMAIN}
    - SINGLE_REGISTRY=true
    - DELETE_IMAGES=true
    - SHOW_CONTENT_DIGEST=true
    - THEME=light

  traefik:
    image: "traefik:v2.10"
    container_name: "traefik"
    restart: unless-stopped
    ports:
    - "80:80"
    - "443:443"

    volumes:
    - type: bind
      source: /var/run/docker.sock
      target: /var/run/docker.sock
      read_only: true

    - type: bind
      source: ./etc/traefik/
      target: /etc/traefik/
      read_only: true

    - type: volume
      source: keys
      target: /keys

    depends_on:
      setup:
        condition: service_completed_successfully

  scheduler:
    container_name: scheduler
    restart: unless-stopped
    build:
      context: .
      tags:
      - seguro/platform

    env_file:
    - .env

    command: ["scheduler"]

    working_dir: /workspace

    volumes:
    - type: bind
      source: .
      target: /workspace
      read_only: true

    - type: bind
      source: /var/run/docker.sock
      target: /var/run/docker.sock
      read_only: true

  notifier:
    container_name: notifier
    restart: unless-stopped
    build:
      context: .
      tags:
      - seguro/platform

    env_file:
    - .env

    command: ["notifier"]

volumes:
  keys:
  store:
  registry:
  mosquitto:
  yacht-config:
