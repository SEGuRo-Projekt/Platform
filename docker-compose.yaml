---
# SPDX-FileCopyrightText: 2023 Steffen Vogel, OPAL-RT Germany GmbH
# SPDX-License-Identifier: Apache-2.0

version: "3.9"

services:
  landing-page:
    build:
      context: images/landing-page
    container_name: landing_page
    restart: unless-stopped

    labels:
    - traefik.enable=true
    - traefik.http.routers.landing-page.rule=Host(`localhost`)
    - traefik.http.routers.landing-page.tls=true

  minio:
    image: minio/minio:RELEASE.2023-04-28T18-11-17Z
    container_name: minio
    restart: unless-stopped

    command: server
      --address ":9000"
      --console-address ":9001"
      --ftp="address=:2021"
      --ftp="passive-port-range=30000-40000"
      --sftp="address=:2022"
      --sftp="ssh-private-key=/keys/ssh_host_rsa_key"
      /data

      # --ftp="tls-private-key=path/to/private.key"
      # --ftp="tls-public-cert=path/to/public.crt"

    labels:
    - traefik.enable=true
    - traefik.http.routers.store-s3.rule=Host(`store.localhost`)
    - traefik.http.routers.store-s3.service=store-s3
    - traefik.http.routers.store-s3.tls=true
    - traefik.http.services.store-s3.loadbalancer.server.port=9000
    - traefik.http.routers.store-ui.rule=Host(`ui.store.localhost`)
    - traefik.http.routers.store-ui.service=store-ui
    - traefik.http.routers.store-ui.tls=true
    - traefik.http.services.store-ui.loadbalancer.server.port=9001

    depends_on:
      setup:
        condition: service_completed_successfully

    environment:
    - MINIO_ROOT_USER=${S3_ACCESS_KEY}
    - MINIO_ROOT_PASSWORD=${S3_SECRET_KEY}

    ports:
    - target: 9000
      published: 9000
      protocol: tcp
      mode: host
    - target: 9001
      published: 9001
      protocol: tcp
      mode: host
    - target: 2021
      published: 2021
      protocol: tcp
      mode: host
    - target: 2022
      published: 2022
      protocol: tcp
      mode: host

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 20s
      retries: 3
      start_period: 20s

    volumes:
    - type: bind
      source: ./data/minio/
      target: /data/
    - type: bind
      source: ./data/keys
      target: /keys

  minio-setup:
    build:
      context: .
      target: minio-setup

    depends_on:
    - minio

    command: ["minio-setup"]

    env_file:
    - .env

    environment:
    - MINIO_ROOT_USER=${S3_ACCESS_KEY}
    - MINIO_ROOT_PASSWORD=${S3_SECRET_KEY}

    volumes:
    - type: bind
      source: ./data/keys
      target: /keys

  setup:
    build:
      context: .
      target: setup
    command:
    - sh
    - -c
    - if ! [ -f /keys/ssh_host_rsa_key ]; then
        ssh-keygen -N '' -t rsa -b 4096 -f /keys/ssh_host_rsa_key;
      fi

      if ! [ -f /keys/server.crt -a -f /keys/server.key ]; then
        openssl req -nodes -x509 -sha256 -newkey rsa:4096
          -keyout /keys/server.key
          -out /keys/server.crt
          -days 356
          -subj "/C=DE/ST=NRW/L=Aachen/O=OPAL-RT/OU=RnD/CN=localhost"
          -addext "subjectAltName = DNS:*.localhost,DNS:localhost" 2> /dev/null;
      fi

    volumes:
    - type: bind
      source: ./data/keys
      target: /keys

  mosquitto:
    image: eclipse-mosquitto:2
    container_name: mosquitto
    restart: unless-stopped

    volumes:
    - type: bind
      source: ./etc/mosquitto/
      target: /mosquitto/config/
    - type: bind
      source: ./log/mosquitto/
      target: /mosquitto/log/
    - type: bind
      source: ./data/mosquitto/
      target: /mosquitto/data/

    ports:
    - target: 1883
      published: 1883
      protocol: tcp
      mode: host

    healthcheck:
      test: ["CMD", "mosquitto_sub", "-p", "1880", "-t", "$$SYS/#", "-C", "1", "-i", "healthcheck", "-W", "3"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s

  yacht:
    image: selfhostedpro/yacht
    container_name: yacht
    restart: unless-stopped

    labels:
    - traefik.enable=true
    - traefik.http.routers.yacht.rule=Host(`ui.localhost`)
    - traefik.http.routers.yacht.tls=true

    ports:
    - 8000:8000

    volumes:
    - type: bind
      source: ./data/yacht
      target: /config
    - type: bind
      source: /var/run/docker.sock
      target: /var/run/docker.sock

    environment:
    - PUID=0
    - PGID=0
    - COMPOSE_DIR=/compose

  registry:
    image: registry:2
    container_name: registry
    restart: unless-stopped

    labels:
    - traefik.enable=true
    - traefik.http.routers.registry.rule=Host(`registry.localhost`)
    - traefik.http.routers.registry.tls=true

    ports:
    - protocol: tcp
      mode: host
      published: 5001
      target: 5001

    volumes:
    - type: bind
      source: ./data/registry
      target: /var/lib/registry
    - type: bind
      source: ./etc/registry
      target: /etc/docker/registry
    - type: bind
      source: ./data/keys
      target: /keys

  registry-ui:
    image: joxit/docker-registry-ui:latest
    container_name: registry_ui
    restart: unless-stopped

    labels:
    - traefik.enable=true
    - traefik.http.routers.registry-ui.rule=Host(`ui.registry.localhost`)
    - traefik.http.routers.registry-ui.tls=true

    ports:
    - protocol: tcp
      target: 80
      published: 8080

    environment:
    - REGISTRY_TITLE=SEGuRo Private Docker Registry
    - REGISTRY_URL=http://localhost:5001
    - SINGLE_REGISTRY=true
    - DELETE_IMAGES=true
    - SHOW_CONTENT_DIGEST=true
    - THEME=light

    depends_on:
    - registry

  traefik:
    image: "traefik:v2.10"
    container_name: "traefik"
    restart: unless-stopped
    ports:
    - "80:80"
    - "443:443"

    volumes:
    - type: bind
      source: /var/run/docker.sock
      target: /var/run/docker.sock
      read_only: true

    - type: bind
      source: ./etc/traefik/
      target: /etc/traefik/
      read_only: true

    - type: bind
      source: ./data/keys
      target: /keys

    depends_on:
      setup:
        condition: service_completed_successfully

  scheduler:
    container_name: scheduler
    restart: unless-stopped
    build:
      context: .

    command: ["scheduler"]
